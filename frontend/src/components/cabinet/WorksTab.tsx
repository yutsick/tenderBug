// src/components/cabinet/WorksTab.tsx - –ó –ü–û–í–ù–û–Æ API –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ñ–Æ
import { useState, useEffect } from 'react';
import { PlusIcon, TrashIcon, CheckCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
import { Alert, Spin, message } from 'antd';
import AddWorkModal from './AddWorkModal';
import { useUserSpecification } from '@/hooks/useUserData';
import { apiClient } from '@/lib/api';

interface Work {
  id: string;
  work_type: string;
  work_type_name: string;
  work_sub_type: string;
  work_sub_type_name: string;
  expiry_date: string;
  permit_file?: string;
  is_expired: boolean;
}

interface WorksTabProps {
  onSubmit: () => void;
}

export default function WorksTab({ onSubmit }: WorksTabProps) {
  // –•—É–∫ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
  const {
    specification,
    loading: specLoading,
    saving: specSaving,
    updateSpecification
  } = useUserSpecification();

  // –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–µ–π—Ç –¥–ª—è —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ —Ä–æ–±—ñ—Ç
  const [specificationType, setSpecificationType] = useState<string>('');
  const [works, setWorks] = useState<Work[]>([]);
  const [worksLoading, setWorksLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    if (specification?.specification_type) {
      setSpecificationType(specification.specification_type);
    }
  }, [specification]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–±—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  useEffect(() => {
    const fetchUserWorks = async () => {
      setWorksLoading(true);
      try {
        const response = await apiClient.getUserWorks();
        setWorks(response.data);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–±—ñ—Ç:', error);
        message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç–∏');
      } finally {
        setWorksLoading(false);
      }
    };

    fetchUserWorks();
  }, []);

  const addWork = async (newWork: {
    workTypeId: string;
    workTypeName: string;
    permitId: string;
    permitName: string;
    expiryDate: string;
    permitFile?: File;
  }) => {
    try {
      const response = await apiClient.createUserWork({
        work_type: newWork.workTypeId,
        work_sub_type: newWork.permitId,
        expiry_date: newWork.expiryDate,
        permit_file: newWork.permitFile
      });

      setWorks(prev => [...prev, response.data]);
      setIsModalOpen(false);
      message.success('–†–æ–±–æ—Ç—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏:', error);
      message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É');
    }
  };

  const removeWork = async (id: string) => {
    try {
      await apiClient.deleteUserWork(id);
      setWorks(works.filter(work => work.id !== id));
      message.success('–†–æ–±–æ—Ç—É –≤–∏–¥–∞–ª–µ–Ω–æ');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏:', error);
      message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–±–æ—Ç—É');
    }
  };

  const handleSubmit = async () => {
    if (!isFormValid) {
      message.warning('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è');
      return;
    }

    setSubmitting(true);
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
      await updateSpecification({
        specification_type: specificationType
      });

      message.success('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
      onSubmit(); // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –¥–ª—è –ø–æ–∫–∞–∑—É Success —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
      message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ');
    } finally {
      setSubmitting(false);
    }
  };

  const isFormValid = specificationType.trim() !== '' && works.length > 0;

  // –ü–æ–∫–∞–∑—É—î–º–æ loader –ø–æ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –¥–∞–Ω—ñ
  if (specLoading || worksLoading) {
    return (
      <div className="flex justify-center items-center py-12">
        <Spin size="large" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫ */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="text-sm font-medium text-blue-800 mb-2">
          üìã –†–æ–±–æ—Ç–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –Ω–µ–±–µ–∑–ø–µ–∫–∏
        </h3>
        <p className="text-sm text-blue-700">
          –°–ø–æ—á–∞—Ç–∫—É –≤–∫–∞–∂—ñ—Ç—å —Ç–∏–ø —Ä–æ–±—ñ—Ç –∑–∞ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é –∑ –¥–æ–¥–∞—Ç–∫—É –¥–æ–≥–æ–≤–æ—Ä—É, –ø–æ—Ç—ñ–º –¥–æ–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–æ–±–æ—Ç–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –Ω–µ–±–µ–∑–ø–µ–∫–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –¥–æ–∑–≤–æ–ª–∞–º–∏.
        </p>
      </div>

      {/* –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è */}
      {specification && (
        <Alert
          message="–î–∞–Ω—ñ —Ä–∞–Ω—ñ—à–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ"
          description={`–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${new Date(specification.updated_at || '').toLocaleString('uk-UA')}`}
          type="success"
          icon={<CheckCircleIcon className="w-4 h-4" />}
          showIcon
          className="mb-4"
        />
      )}

      {/* –ü–æ–ª–µ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –¢–∏–ø —Ä–æ–±—ñ—Ç –∑–∞ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é *
          </label>
          <textarea
            placeholder="–∑ –¥–æ–¥–∞—Ç–∫—É –¥–æ–≥–æ–≤–æ—Ä—É"
            value={specificationType}
            onChange={(e) => setSpecificationType(e.target.value)}
            className="w-full px-3 py-3 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 resize-none"
            rows={3}
            required
          />
          <p className="text-xs text-gray-500 mt-1">
            –û–ø–∏—à—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–∏–ø —Ä–æ–±—ñ—Ç –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–≥–æ–≤–æ—Ä–æ–º
          </p>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ä–æ–±—ñ—Ç */}
      {works.length > 0 && (
        <div className="space-y-4">
          {works.map((work) => {
            const isExpired = work.is_expired;
            return (
              <div
                key={work.id}
                className={`bg-white border rounded-lg p-6 relative ${isExpired ? 'border-red-200 bg-red-50' : 'border-gray-200'
                  }`}
              >
                {isExpired && (
                  <div className="absolute top-2 right-16 flex items-center text-red-600">
                    <ExclamationTriangleIcon className="w-4 h-4 mr-1" />
                    <span className="text-xs font-medium">–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è</span>
                  </div>
                )}

                <button
                  onClick={() => removeWork(work.id!)}
                  className="absolute top-4 right-4 p-2 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-md transition-colors"
                  title="–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–±–æ—Ç—É"
                >
                  <TrashIcon className="w-5 h-5" />
                </button>

                <div className="space-y-4 pr-12">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –¢–∏–ø —Ä–æ–±–æ—Ç–∏
                    </label>
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md text-sm text-gray-800">
                      {work.work_type_name}
                    </div>
                  </div>

                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        –î–æ–∑–≤—ñ–ª
                      </label>
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md text-sm text-gray-800">
                        {work.work_sub_type_name}
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ—ó –¥–æ–∑–≤–æ–ª—É
                      </label>
                      <div className={`px-3 py-2 bg-gray-50 border border-gray-200 rounded-md text-sm ${isExpired ? 'text-red-800 font-medium' : 'text-gray-800'
                        }`}>
                        {new Date(work.expiry_date).toLocaleDateString('uk-UA')}
                      </div>
                    </div>
                  </div>

                  {work.permit_file && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        –§–∞–π–ª –¥–æ–∑–≤–æ–ª—É
                      </label>
                      <div className="flex items-center gap-2 px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        <svg className="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <span className="flex-1 text-sm text-gray-700 truncate">
                          {/* –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –∑ URL */}
                          {work.permit_file.split('/').pop()?.split('_').slice(-1)[0] || 'permit_file.pdf'}
                        </span>
                        <a
                          href={work.permit_file}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-xs text-blue-600 hover:text-blue-800 font-medium"
                        >
                          –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏
                        </a>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* –ó–∞–≥–ª—É—à–∫–∞ –∫–æ–ª–∏ –Ω–µ–º–∞—î —Ä–æ–±—ñ—Ç */}
      {works.length === 0 && (
        <div className="text-center py-8 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
          <div className="text-gray-500 mb-4">
            <svg className="w-10 h-10 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <p className="text-sm">–©–µ –Ω–µ –¥–æ–¥–∞–Ω–æ —Ä–æ–±—ñ—Ç –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –Ω–µ–±–µ–∑–ø–µ–∫–∏</p>
            <p className="text-xs text-gray-400 mt-1">–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ç–∏–ø —Ä–æ–±—ñ—Ç –∑–∞ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é</p>
          </div>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏ */}
      <div className="text-center">
        <button
          onClick={() => setIsModalOpen(true)}
          disabled={!specificationType.trim()}
          className={`inline-flex items-center px-4 py-2 border-2 border-dashed rounded-md transition-colors ${specificationType.trim()
              ? 'border-green-500 text-green-600 hover:border-green-600 hover:bg-green-50'
              : 'border-gray-300 text-gray-400 cursor-not-allowed'
            }`}
        >
          <PlusIcon className="w-5 h-5 mr-2" />
          –î–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –Ω–µ–±–µ–∑–ø–µ–∫–∏
        </button>
        {!specificationType.trim() && (
          <p className="text-xs text-gray-500 mt-2">
            –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ç–∏–ø —Ä–æ–±—ñ—Ç –∑–∞ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
          </p>
        )}
      </div>

      <hr className="border-gray-200" />

      {/* –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è */}
      <div className="text-center">
        <button
          onClick={handleSubmit}
          disabled={!isFormValid || submitting || specSaving}
          className={`px-8 py-3 rounded-md transition-colors font-medium inline-flex items-center gap-2 ${isFormValid && !submitting && !specSaving
              ? 'bg-green-600 hover:bg-green-700 text-white'
              : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }`}
        >
          {(submitting || specSaving) && <Spin size="small" />}
          {submitting || specSaving ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : `–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ ${works.length > 0 ? `(—Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è + ${works.length} —Ä–æ–±–æ—Ç–∏)` : '(—Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è)'}`}
        </button>

        {!isFormValid && (
          <p className="text-xs text-gray-500 mt-2">
            –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ä–æ–±–æ—Ç—É
          </p>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ */}
      <AddWorkModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onAdd={addWork}
      />
    </div>
  );
}