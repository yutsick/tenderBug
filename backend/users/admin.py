# backend/users/admin.py
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.utils.html import format_html
from django.utils.safestring import mark_safe
from django.contrib import messages
from django.conf import settings
from django.contrib.auth.forms import UserCreationForm, UserChangeForm
from django import forms
from django_select2.forms import ModelSelect2Widget
from .models import User, Department, WorkType, WorkSubType, Equipment, UserWork, TechnicType, InstrumentType, UserSpecification, UserEmployee, UserOrder, UserTechnic, UserInstrument, UserPPE, Permit
from django.urls import reverse

def get_file_url(file_field):
    """–û—Ç—Ä–∏–º—É—î URL —Ñ–∞–π–ª—É –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ñ–æ—Ä–º–∞—Ç—É –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è"""
    try:
        if hasattr(file_field, 'url'):
            return file_field.url
        elif isinstance(file_field, str) and file_field.startswith('/'):
            return f"{settings.MEDIA_URL.rstrip('/')}{file_field}"
        elif isinstance(file_field, dict) and "url" in file_field:
            return file_field["url"]
        return None
    except:
        return None
    
@admin.register(Department)
class DepartmentAdmin(admin.ModelAdmin):
    list_display = ['name', 'code', 'is_active', 'created_at']
    list_filter = ['is_active']
    search_fields = ['name', 'code']
    
    def get_queryset(self, request):
        """–ê–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –Ω–µ –±–∞—á–∞—Ç—å —ñ–Ω—à—ñ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏"""
        qs = super().get_queryset(request)
        if request.user.is_superuser:
            return qs
        # –ó–≤–∏—á–∞–π–Ω—ñ –∞–¥–º—ñ–Ω–∏ –Ω–µ –º–æ–∂—É—Ç—å –∫–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∞–º–∏
        return qs.none()
    
    def has_add_permission(self, request):
        return request.user.is_superuser
    
    def has_change_permission(self, request, obj=None):
        return request.user.is_superuser
    
    def has_delete_permission(self, request, obj=None):
        return request.user.is_superuser


# –ü—Ä–æ–∫—Å—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
class TenderUser(User):
    """–ü–µ—Ä–µ–º–æ–∂—Ü—ñ —Ç–µ–Ω–¥–µ—Ä—ñ–≤ (–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)"""
    class Meta:
        proxy = True
        verbose_name = "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ç–µ–Ω–¥–µ—Ä—É"
        verbose_name_plural = "–ü–µ—Ä–µ–º–æ–∂—Ü—ñ —Ç–µ–Ω–¥–µ—Ä—ñ–≤"


class StaffUser(User):
    """–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ (–∞–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤)"""
    class Meta:
        proxy = True
        verbose_name = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É"
        verbose_name_plural = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤"


# –§–æ—Ä–º–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ–≤ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤
class StaffUserCreationForm(UserCreationForm):
    """–§–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É"""
    email = forms.EmailField(required=True, label='Email')
    first_name = forms.CharField(max_length=150, required=True, label="–Ü–º'—è")
    last_name = forms.CharField(max_length=150, required=True, label='–ü—Ä—ñ–∑–≤–∏—â–µ')
    department = forms.ModelChoiceField(
        queryset=Department.objects.filter(is_active=True),
        required=True,
        label='–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª'
    )
    tender_number = forms.CharField(
        max_length=100,
        required=True,
        label='–ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä—É (–¥–ª—è –∞–¥–º—ñ–Ω–∞)',
        help_text='–í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: ADMIN_SEEDS_001',
        initial='ADMIN_'
    )
    is_superuser = forms.BooleanField(
        required=False,
        label='–°—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
        help_text='–°—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–∞—é—Ç—å –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏'
    )
    password1 = forms.CharField(
        label='–ü–∞—Ä–æ–ª—å',
        widget=forms.PasswordInput,
        help_text='–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    )
    password2 = forms.CharField(
        label='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é',
        widget=forms.PasswordInput,
        help_text='–í–≤–µ–¥—ñ—Ç—å —Ç–æ–π –∂–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
    )
    def clean_password2(self):
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError("–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å")
        return password2
    class Meta:
        model = User
        fields = ('username', 'email', 'first_name', 'last_name', 'tender_number', 'department', 'is_superuser')
    
    def save(self, commit=True):
        user = super().save(commit=False)
        user.email = self.cleaned_data['email']
        user.first_name = self.cleaned_data['first_name'] 
        user.last_name = self.cleaned_data['last_name']
        user.department = self.cleaned_data['department']
        user.tender_number = self.cleaned_data['tender_number']
        user.is_staff = True
        user.is_superuser = self.cleaned_data['is_superuser']
        user._from_admin = True  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤ save()
        
        user.set_password(self.cleaned_data["password1"])

        if commit:
            user.save()
        return user


class StaffUserChangeForm(UserChangeForm):
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É"""
    department = forms.ModelChoiceField(
        queryset=Department.objects.filter(is_active=True),
        required=False,
        label='–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª'
    )
    
    class Meta:
        model = User
        fields = '__all__'

@admin.register(StaffUser)
class StaffUserAdmin(BaseUserAdmin):
    """
    ‚≠ê –ì–û–õ–û–í–ù–ê –ü–ê–ù–ï–õ–¨ –î–õ–Ø –°–£–ü–ï–†–ê–î–ú–Ü–ù–ê
    –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤
    """
    form = StaffUserChangeForm
    add_form = StaffUserCreationForm
    
    list_display = [
        'username', 'email', 'full_name', 'department_name', 
        'is_superuser_display', 'is_active', 'last_login', 'date_joined'
    ]
    list_filter = ['is_superuser', 'is_active', 'department', 'date_joined']
    search_fields = ['username', 'email', 'first_name', 'last_name']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('username', 'email', 'first_name', 'last_name')
        }),
        ('–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª —Ç–∞ –ø—Ä–∞–≤–∞', {
            'fields': ('department', 'is_superuser', 'is_active')
        }),
        ('–ü–∞—Ä–æ–ª—å', {
            'fields': ('password',),
            'description': '–î–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Ñ–æ—Ä–º—É.'
        }),
        ('–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('last_login', 'date_joined'),
            'classes': ('collapse',)
        }),
    )
    
    add_fieldsets = (
        ('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É', {
            'classes': ('wide',),
            'fields': ('username', 'email', 'first_name', 'last_name', 'department', 'tender_number', 'is_superuser', 'password1', 'password2'),
            'description': '–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É. –í—ñ–Ω –º–∞—Ç–∏–º–µ –¥–æ—Å—Ç—É–ø –¥–æ Django admin –ø–∞–Ω–µ–ª—ñ.'
        }),
    )
    
    def get_queryset(self, request):
        """–ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ (is_staff=True)"""
        return super().get_queryset(request).filter(is_staff=True)
    
    # def get_form(self, request, obj=None, **kwargs):
    #     """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
    #     if obj is None:  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
    #         kwargs['form'] = self.add_form
    #     return super().get_form(request, obj, **kwargs)
    
    def has_module_permission(self, request):
        """–¢—ñ–ª—å–∫–∏ —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω –º–æ–∂–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º–∏"""
        return request.user.is_superuser
    
    def has_add_permission(self, request):
        return request.user.is_superuser
    
    def has_change_permission(self, request, obj=None):
        return request.user.is_superuser
    
    def has_delete_permission(self, request, obj=None):
        return request.user.is_superuser
    
    def full_name(self, obj):
        """–ü–æ–≤–Ω–µ —ñ–º'—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞"""
        if obj.first_name and obj.last_name:
            return f"{obj.first_name} {obj.last_name}"
        return obj.username
    full_name.short_description = "–ü–æ–≤–Ω–µ —ñ–º'—è"
    
    def department_name(self, obj):
        """–ù–∞–∑–≤–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É"""
        return obj.department.name if obj.department else '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ'
    department_name.short_description = '–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª'
    
    def is_superuser_display(self, obj):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∏–ø—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if obj.is_superuser:
            return format_html('<span style="color: #ff4d4f; font-weight: bold;">üëë –°—É–ø–µ—Ä–∞–¥–º—ñ–Ω</span>')
        else:
            return format_html('<span style="color: #1890ff;">üë§ –ê–¥–º—ñ–Ω –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É</span>')
    is_superuser_display.short_description = '–¢–∏–ø'
    
    def save_model(self, request, obj, form, change):
        """–ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
        if not change:  # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            obj.is_staff = True
            obj._from_admin = True  # –©–æ–± –æ–±—ñ–π—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤ save()
            
        super().save_model(request, obj, form, change)
        
        # ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –ù–ê–î–ê–Ñ–ú–û –ü–†–ê–í–ê –ê–î–ú–Ü–ù–£ –ü–Ü–î–†–û–ó–î–Ü–õ–£:
        if not change and not obj.is_superuser:  # –¢—ñ–ª—å–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö –∞–¥–º—ñ–Ω—ñ–≤ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤
            from django.contrib.auth.models import Permission
            from django.contrib.contenttypes.models import ContentType
            
            # –û—Ç—Ä–∏–º—É—î–º–æ ContentType –¥–ª—è –º–æ–¥–µ–ª—ñ User
            user_content_type = ContentType.objects.get_for_model(User)
            
            # –ë–∞–∑–æ–≤—ñ –ø—Ä–∞–≤–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
            basic_permissions = [
                'view_user',           # –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                'change_user',         # –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                'view_tenderuser',     # –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ç–µ–Ω–¥–µ—Ä—ñ–≤
                'change_tenderuser',   # –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ç–µ–Ω–¥–µ—Ä—ñ–≤
            ]
            
            # –î–æ–¥–∞—î–º–æ –ø—Ä–∞–≤–∞
            for perm_codename in basic_permissions:
                try:
                    permission = Permission.objects.get(
                        codename=perm_codename,
                        content_type__app_label='users'
                    )
                    obj.user_permissions.add(permission)
                except Permission.DoesNotExist:
                    print(f"Permission {perm_codename} not found")
                    continue
            
            print(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—É –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É: {obj.username}")


# ================ INLINE –ö–õ–ê–°–ò –î–õ–Ø –ü–ï–†–ï–ì–õ–Ø–î–£ –î–ê–ù–ò–• –ö–ê–ë–Ü–ù–ï–¢–£ ================

# ================ –°–ü–ï–¶–ò–§–Ü–ö–ê–¶–Ü–Ø –ó –†–û–ë–û–¢–ê–ú–ò –¢–ê –§–ê–ô–õ–ê–ú–ò ================

class UserWorkInline(admin.TabularInline):
    """–†–æ–±–æ—Ç–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –Ω–µ–±–µ–∑–ø–µ–∫–∏ –∑ –¥–æ–∑–≤–æ–ª–∞–º–∏"""
    model = UserWork
    extra = 0
    can_delete = False
    readonly_fields = ['work_type', 'work_sub_type', 'expiry_date', 'permit_file_link', 'is_expired_display', 'created_at']
    fields = ['work_type', 'work_sub_type', 'expiry_date', 'permit_file_link', 'is_expired_display', 'created_at']

    def permit_file_link(self, obj):
        """–ö–ª—ñ–∫–æ–≤–∏–π –ª—ñ–Ω–∫ –Ω–∞ —Ñ–∞–π–ª –¥–æ–∑–≤–æ–ª—É"""
        if obj.permit_file:
            try:
                if hasattr(obj.permit_file, 'url'):
                    file_name = obj.permit_file.name.split('/')[-1] if obj.permit_file.name else "permit.pdf"
                    result = format_html(
                        '<a href="{}" target="_blank" style="color: #007cba; text-decoration: none;">üìÑ {}</a>',
                        obj.permit_file.url, file_name
                    )
                    return mark_safe(result)
                else:
                    return format_html('<span style="color: #52c41a;">üìÑ –î–æ–∑–≤—ñ–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ</span>')
            except:
                return format_html('<span style="color: #888;">üìÑ –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π</span>')
        return format_html('<span style="color: #ccc;">üìÑ –ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É</span>')
    permit_file_link.short_description = '–§–∞–π–ª –¥–æ–∑–≤–æ–ª—É'

    def is_expired_display(self, obj):
        """–°—Ç–∞—Ç—É—Å —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó"""
        if obj.is_expired:
            return format_html('<span style="color: #ff4d4f; font-weight: bold;">‚ùå –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ</span>')
        else:
            return format_html('<span style="color: #52c41a; font-weight: bold;">‚úÖ –î—ñ—î</span>')
    is_expired_display.short_description = '–°—Ç–∞—Ç—É—Å'

    def has_add_permission(self, request, obj=None):
        return False


class UserSpecificationInline(admin.StackedInline):
    """–°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ä–æ–±—ñ—Ç"""
    model = UserSpecification
    extra = 0
    max_num = 1
    can_delete = False
    readonly_fields = ['specification_type', 'works_summary', 'created_at', 'updated_at']
    fields = ['specification_type', 'works_summary', 'created_at', 'updated_at']

    def works_summary(self, obj):
        """–ü—ñ–¥—Å—É–º–æ–∫ —Ä–æ–±—ñ—Ç –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –Ω–µ–±–µ–∑–ø–µ–∫–∏ –ó –ö–õ–Ü–ö–û–í–ò–ú–ò –õ–Ü–ù–ö–ê–ú–ò"""
        try:
            works = obj.user.works.all()
            if works:
                works_html = []
                for work in works[:5]:  # –ü–µ—Ä—à—ñ 5 —Ä–æ–±—ñ—Ç
                    # –°—Ç–∞—Ç—É—Å —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó
                    if work.is_expired:
                        status = format_html('<span style="color: #ff4d4f; font-weight: bold;">‚ùå</span>')
                    else:
                        status = format_html('<span style="color: #52c41a; font-weight: bold;">‚úÖ</span>')
                    
                    # –ö–õ–Ü–ö–û–í–ò–ô –õ–Ü–ù–ö –Ω–∞ —Ñ–∞–π–ª –¥–æ–∑–≤–æ–ª—É
                    permit_link = ""
                    if work.permit_file:
                        try:
                            if hasattr(work.permit_file, 'url') and hasattr(work.permit_file, 'name'):
                                file_name = work.permit_file.name.split('/')[-1] if work.permit_file.name else "permit.pdf"
                                permit_link = format_html(' <a href="{}" target="_blank" style="color: #007cba; text-decoration: none; font-size: 11px;">üìÑ {}</a>', 
                                                        work.permit_file.url, file_name)
                        except:
                            permit_link = format_html(' <span style="color: #888; font-size: 11px;">üìÑ –§–∞–π–ª</span>')
                    
                    # –í–°–ï –ß–ï–†–ï–ó format_html
                    work_line = format_html('{} <strong>{}</strong> (–¥–æ {})', 
                                        status, 
                                        work.work_sub_type.name, 
                                        work.expiry_date.strftime("%d.%m.%Y"))
                    
                    # –û–±'—î–¥–Ω—É—î–º–æ –∑ –ª—ñ–Ω–∫–æ–º
                    if permit_link:
                        work_line = format_html('{}{}', work_line, permit_link)
                    
                    works_html.append(work_line)
                
                # –í–°–ï –ß–ï–†–ï–ó format_html
                works_joined = format_html('<br>'.join([str(work) for work in works_html]))
                
                extra_text = ""
                if works.count() > 5:
                    extra_text = format_html('<br><small style="color: #666;">... —Ç–∞ —â–µ {} —Ä–æ–±—ñ—Ç</small>', works.count() - 5)
                
                return format_html(
                    '<div style="background: #f6ffed; padding: 15px; border-radius: 6px; border-left: 4px solid #52c41a;">'
                    '<strong style="color: #52c41a;">‚ö° {} —Ä–æ–±—ñ—Ç –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –Ω–µ–±–µ–∑–ø–µ–∫–∏:</strong><br><br>{}{}'
                    '</div>',
                    works.count(), works_joined, extra_text
                )
            else:
                return format_html(
                    '<div style="background: #f5f5f5; padding: 15px; border-radius: 6px; border-left: 4px solid #d9d9d9;">'
                    '<span style="color: #999;">‚ö° –†–æ–±–æ—Ç–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –Ω–µ–±–µ–∑–ø–µ–∫–∏ –Ω–µ –¥–æ–¥–∞–Ω—ñ</span>'
                    '</div>'
                )
        except Exception as e:
            return format_html('<span style="color: #ff4d4f;">–ü–æ–º–∏–ª–∫–∞: {}</span>', str(e))
    
    works_summary.short_description = '–†–æ–±–æ—Ç–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –Ω–µ–±–µ–∑–ø–µ–∫–∏'

    def has_add_permission(self, request, obj=None):
        return False
    
    works_summary.short_description = '–†–æ–±–æ—Ç–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –Ω–µ–±–µ–∑–ø–µ–∫–∏'

    def has_add_permission(self, request, obj=None):
        return False


class UserEmployeeInline(admin.TabularInline):
    """–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏"""
    model = UserEmployee
    extra = 0
    can_delete = False
    readonly_fields = ['name', 'photo_display', 'medical_exam_date', 'organization_name', 
                      'position', 'documents_info', 'created_at']
    
    fields = ['name', 'photo_display', 'medical_exam_date', 'organization_name',
              'position', 'documents_info', 'created_at']

    def photo_display(self, obj):
        if obj.photo:
            photo_url = get_file_url(obj.photo)
            if photo_url:
                return format_html(
                    '<a href="{}" target="_blank" style="color: #007cba; text-decoration: none;">üì∑ –§–æ—Ç–æ</a>',
                    photo_url
                )
            return format_html('<span style="color: #52c41a;">üì∑ –§–æ—Ç–æ —î</span>')
        return format_html('<span style="color: #ccc;">üì∑ –ù–µ–º–∞—î</span>')
    photo_display.short_description = '–§–æ—Ç–æ'

    def documents_info(self, obj):
        docs = []
        
        # –ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è
        if obj.qualification_certificate:
            qual_url = get_file_url(obj.qualification_certificate)
            if qual_url:
                docs.append(f'<a href="{qual_url}" target="_blank" style="color: #007cba; text-decoration: none;">üìÑ –ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è</a>')
            else:
                docs.append("üìÑ –ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è")
        
        # –ë–µ–∑–ø–µ–∫–∞
        if obj.safety_training_certificate:
            safety_url = get_file_url(obj.safety_training_certificate)
            if safety_url:
                docs.append(f'<a href="{safety_url}" target="_blank" style="color: #007cba; text-decoration: none;">üõ°Ô∏è –ë–µ–∑–ø–µ–∫–∞</a>')
            else:
                docs.append("üõ°Ô∏è –ë–µ–∑–ø–µ–∫–∞")
        
        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è
        if obj.special_training_certificate:
            special_url = get_file_url(obj.special_training_certificate)
            if special_url:
                docs.append(f'<a href="{special_url}" target="_blank" style="color: #007cba; text-decoration: none;">‚≠ê –°–ø–µ—Ü.–Ω–∞–≤—á–∞–Ω–Ω—è</a>')
            else:
                docs.append("‚≠ê –°–ø–µ—Ü.–Ω–∞–≤—á–∞–Ω–Ω—è")
        
        if docs:
            return format_html('<div style="line-height: 1.4;">{}</div>'.format('<br>'.join(docs)))
        return format_html('<span style="color: #ccc;">–ù–µ–º–∞—î –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤</span>')
    documents_info.short_description = '–î–æ–∫—É–º–µ–Ω—Ç–∏'

    def has_add_permission(self, request, obj=None):
        return False


class UserOrderInline(admin.TabularInline):
    """–ù–∞–∫–∞–∑–∏"""
    model = UserOrder
    extra = 0
    can_delete = False
    readonly_fields = ['order_type',  'documents_preview', 'created_at']
    fields = ['order_type',  'documents_preview', 'created_at']

    def documents_count(self, obj):
        if obj.documents:
            try:
                count = len(obj.documents) if isinstance(obj.documents, list) else 0
                return format_html('<span style="color: #52c41a; font-weight: bold;">üìÅ {}</span>', count)
            except:
                return format_html('<span style="color: #888;">üìÅ –Ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏</span>')
        return format_html('<span style="color: #ccc;">üìÅ 0</span>')
    documents_count.short_description = '–ö-—Å—Ç—å'

    def documents_preview(self, obj):
        if obj.documents:
            try:
                if isinstance(obj.documents, list) and obj.documents:
                    links = []
                    for doc in obj.documents[:3]:  # –ü–µ—Ä—à—ñ 3 —Ñ–∞–π–ª–∏
                        if isinstance(doc, dict):
                            file_name = doc.get("name", "–§–∞–π–ª")
                            file_url = doc.get("path") or doc.get("url")
                            
                            if file_url:
                                # –ö–õ–Ü–ö–û–í–ò–ô –õ–Ü–ù–ö –ß–ï–†–ï–ó format_html
                                link = format_html('<a href="{}" target="_blank" style="color: #007cba; text-decoration: none;">üìÑ {}</a>', file_url, file_name)
                            else:
                                # –ü–†–û–°–¢–û –ù–ê–ó–í–ê
                                link = format_html('üìÑ {}', file_name)
                            links.append(link)
                    
                    # –û–±'—î–¥–Ω—É—î–º–æ –≥–æ—Ç–æ–≤—ñ HTML –µ–ª–µ–º–µ–Ω—Ç–∏
                    result = format_html('<br>'.join([str(link) for link in links]))
                    if len(obj.documents) > 3:
                        result += format_html('<br><small style="color: #666;">... —Ç–∞ —â–µ {} —Ñ–∞–π–ª—ñ–≤</small>', len(obj.documents) - 3)
                    
                    return format_html('<div style="line-height: 1.4;">{}</div>', result)
            except Exception as e:
                print(f"DEBUG –ù–∞–∫–∞–∑–∏: {e}")
                pass
        return format_html('<span style="color: #ccc;">‚Äî</span>')
    documents_preview.short_description = '–§–∞–π–ª–∏'

    def has_add_permission(self, request, obj=None):
        return False


class UserTechnicInline(admin.TabularInline):
    """–¢–µ—Ö–Ω—ñ–∫–∞"""
    model = UserTechnic
    extra = 0
    can_delete = False
    readonly_fields = ['technic_display', 'documents_count', 'documents_links', 'created_at']
    fields = ['technic_display', 'documents_count', 'registration_number', 'documents_links', 'created_at']

    def technic_display(self, obj):
        if obj.technic_type:
            return format_html('<span style="color: #1890ff;">üöú {}</span>', obj.technic_type.name)
        elif obj.custom_type:
            return format_html('<span style="color: #722ed1;">üîß {} (–≤–ª–∞—Å–Ω–∏–π)</span>', obj.custom_type)
        return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'
    technic_display.short_description = '–¢–µ—Ö–Ω—ñ–∫–∞'

    def documents_count(self, obj):
        if obj.documents:
            try:
                total_docs = sum(len(files) for files in obj.documents.values() if isinstance(files, list))
                return format_html('<span style="color: #52c41a; font-weight: bold;">üìÅ {}</span>', total_docs)
            except:
                return format_html('<span style="color: #888;">üìÅ –Ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏</span>')
        return format_html('<span style="color: #ccc;">üìÅ 0</span>')
    documents_count.short_description = '–î–æ–∫—É–º–µ–Ω—Ç—ñ–≤'

    def documents_links(self, obj):
        """–ö–õ–Ü–ö–û–í–Ü –õ–Ü–ù–ö–ò –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —Ç–µ—Ö–Ω—ñ–∫–∏"""
        if obj.documents:
            try:
                links = []
                for doc_type, files in obj.documents.items():
                    if isinstance(files, list) and files:
                        type_links = []
                        for file_info in files[:2]:  # –ü–µ—Ä—à—ñ 2 —Ñ–∞–π–ª–∏ –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É
                            if isinstance(file_info, dict):
                                file_name = file_info.get("name", "–§–∞–π–ª")
                                file_path = file_info.get("path") or file_info.get("url")
                                
                                if file_path:
                                    # –ö–õ–Ü–ö–û–í–ò–ô –õ–Ü–ù–ö –ß–ï–†–ï–ó format_html
                                    link = format_html('<a href="{}" target="_blank" style="color: #007cba; text-decoration: none; font-size: 11px; display:inline-block; margin-bottom:10px">{}</a>', file_path, file_name)
                                else:
                                    # –ü–†–û–°–¢–û –ù–ê–ó–í–ê
                                    link = format_html('<span style="font-size: 11px;">{}</span>', file_name)
                                type_links.append(link)
                        
                        if type_links:
                            if len(files) > 2:
                                type_links.append(format_html('<small style="color: #666;">+{}</small>', len(files) - 2))
                            
                            # –û–±'—î–¥–Ω—É—î–º–æ –ª—ñ–Ω–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç—É
                            type_result = format_html('<strong style="color: #1890ff; font-size: 10px;">{}:</strong><br>{}', 
                                                    doc_type, 
                                                    format_html('<br>'.join([str(link) for link in type_links])))
                            links.append(type_result)
                
                if links:
                    return format_html('<div style="line-height: 1.3; max-width: 250px;">{}</div>', 
                                    format_html('<br><br>'.join([str(link) for link in links[:2]])))
            except Exception as e:
                print(f"DEBUG –¢–µ—Ö–Ω—ñ–∫–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                return format_html('<span style="color: #ff4d4f;">–ü–æ–º–∏–ª–∫–∞: {}</span>', str(e))
        return format_html('<span style="color: #ccc;">‚Äî</span>')
    documents_links.short_description = '–§–∞–π–ª–∏'

    def has_add_permission(self, request, obj=None):
        return False


class UserInstrumentInline(admin.TabularInline):
    """–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"""
    model = UserInstrument
    extra = 0
    can_delete = False
    readonly_fields = ['instrument_display', 'documents_count', 'documents_links', 'created_at']
    fields = ['instrument_display', 'documents_count', 'documents_links', 'created_at']

    def instrument_display(self, obj):
        if obj.instrument_type:
            return format_html('<span style="color: #722ed1;">üî® {}</span>', obj.instrument_type.name)
        elif obj.custom_type:
            return format_html('<span style="color: #fa8c16;">‚öíÔ∏è {} (–≤–ª–∞—Å–Ω–∏–π)</span>', obj.custom_type)
        return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'
    instrument_display.short_description = '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'

    def documents_count(self, obj):
        if obj.documents:
            try:
                total_docs = sum(len(files) for files in obj.documents.values() if isinstance(files, list))
                return format_html('<span style="color: #52c41a; font-weight: bold;">üìÅ {}</span>', total_docs)
            except:
                return format_html('<span style="color: #888;">üìÅ –Ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏</span>')
        return format_html('<span style="color: #ccc;">üìÅ 0</span>')
    documents_count.short_description = '–î–æ–∫—É–º–µ–Ω—Ç—ñ–≤'

    def documents_links(self, obj):
        """–ö–õ–Ü–ö–û–í–Ü –õ–Ü–ù–ö–ò –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤"""
        if obj.documents:
            try:
                links = []
                for doc_type, files in obj.documents.items():
                    if isinstance(files, list) and files:
                        type_links = []
                        for file_info in files[:2]:  # –ü–µ—Ä—à—ñ 2 —Ñ–∞–π–ª–∏ –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É
                            if isinstance(file_info, dict):
                                file_name = file_info.get("name", "–§–∞–π–ª")
                                file_path = file_info.get("path") or file_info.get("url")
                                
                                if file_path:
                                    # –ö–õ–Ü–ö–û–í–ò–ô –õ–Ü–ù–ö –ß–ï–†–ï–ó format_html
                                    link = format_html('<a href="{}" target="_blank" style="color: #007cba; text-decoration: none; font-size: 11px;; display:inline-block; margin-bottom:10px">{}</a>', file_path, file_name)
                                else:
                                    # –ü–†–û–°–¢–û –ù–ê–ó–í–ê
                                    link = format_html('<span style="font-size: 11px;">{}</span>', file_name)
                                type_links.append(link)
                        
                        if type_links:
                            if len(files) > 2:
                                type_links.append(format_html('<small style="color: #666;">+{}</small>', len(files) - 2))
                            
                            # –û–±'—î–¥–Ω—É—î–º–æ –ª—ñ–Ω–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç—É
                            type_result = format_html('<strong style="color: #722ed1; font-size: 10px;">{}:</strong><br>{}', 
                                                    doc_type, 
                                                    format_html('<br>'.join([str(link) for link in type_links])))
                            links.append(type_result)
                
                if links:
                    return format_html('<div style="line-height: 1.3; max-width: 250px;">{}</div>', 
                                    format_html('<br><br>'.join([str(link) for link in links[:2]])))
            except Exception as e:
                print(f"DEBUG –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –ø–æ–º–∏–ª–∫–∞: {e}")
                return format_html('<span style="color: #ff4d4f;">–ü–æ–º–∏–ª–∫–∞: {}</span>', str(e))
        return format_html('<span style="color: #ccc;">‚Äî</span>')
    documents_links.short_description = '–§–∞–π–ª–∏'

    def has_add_permission(self, request, obj=None):
        return False


class UserPPEInline(admin.StackedInline):
    """–ó–Ü–ó - –ó–∞—Å–æ–±–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ö–∏—Å—Ç—É"""
    model = UserPPE
    extra = 0
    max_num = 1
    can_delete = False
    readonly_fields = ['documents_links', 'created_at', 'updated_at']
    fields = ['documents_links', 'created_at', 'updated_at']

    def documents_links(self, obj):
        """–ö–õ–Ü–ö–û–í–Ü –õ–Ü–ù–ö–ò –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ó–Ü–ó"""
        if obj.documents:
            try:
                if isinstance(obj.documents, list):
                    count = len(obj.documents)
                    file_links = []
                    
                    for i, doc in enumerate(obj.documents[:5]):  # –ü–µ—Ä—à—ñ 5 —Ñ–∞–π–ª—ñ–≤
                        if isinstance(doc, dict):
                            file_name = doc.get("name", "–§–∞–π–ª")
                            file_path = doc.get("path") or doc.get("url")
                            size = doc.get("size")
                            
                            if file_path:
                                # –ö–õ–Ü–ö–û–í–ò–ô –õ–Ü–ù–ö –ó –†–û–ó–ú–Ü–†–û–ú
                                if size:
                                    try:
                                        size_mb = round(int(size) / 1024 / 1024, 2)
                                        file_link = format_html('<a href="{}" target="_blank" style="color: #007cba; text-decoration: none; ; display:inline-block; margin-bottom:10px">üìÑ {}</a> <small style="color: #666;">({} MB)</small>', 
                                                            file_path, file_name, size_mb)
                                    except:
                                        file_link = format_html('<a href="{}" target="_blank" style="color: #007cba; text-decoration: none;">üìÑ {}</a>', 
                                                            file_path, file_name)
                                else:
                                    file_link = format_html('<a href="{}" target="_blank" style="color: #007cba; text-decoration: none;">üìÑ {}</a>', 
                                                        file_path, file_name)
                            else:
                                # –ü–†–û–°–¢–û –ù–ê–ó–í–ê
                                file_link = format_html('üìÑ {}', file_name)
                            file_links.append(file_link)
                    
                    if file_links:
                        files_html = format_html('<br>'.join([str(link) for link in file_links]))
                        extra_info = ""
                        if count > 5:
                            extra_info = format_html('<br><br><small style="color: #666;">... —Ç–∞ —â–µ {} —Ñ–∞–π–ª—ñ–≤</small>', count - 5)
                        
                        return format_html(
                            '<div style="background: #f6ffed; padding: 15px; border-radius: 6px; border-left: 4px solid #52c41a;">'
                            '<strong style="color: #52c41a;">üõ°Ô∏è {} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ó–Ü–ó:</strong><br><br>{}{}'
                            '</div>',
                            count, files_html, extra_info
                        )
            except Exception as e:
                print(f"DEBUG –ó–Ü–ó –ø–æ–º–∏–ª–∫–∞: {e}")
                return format_html(
                    '<div style="background: #fff7e6; padding: 15px; border-radius: 6px; border-left: 4px solid #faad14;">'
                    '<span style="color: #fa8c16;">üõ°Ô∏è –ü–æ–º–∏–ª–∫–∞: {}</span>'
                    '</div>', str(e)
                )
        
        return format_html(
            '<div style="background: #f5f5f5; padding: 15px; border-radius: 6px; border-left: 4px solid #d9d9d9;">'
            '<span style="color: #999;">üõ°Ô∏è –î–æ–∫—É–º–µ–Ω—Ç–∏ –ó–Ü–ó –≤—ñ–¥—Å—É—Ç–Ω—ñ</span>'
            '</div>'
        )
    
    documents_links.short_description = '–î–æ–∫—É–º–µ–Ω—Ç–∏ –ó–Ü–ó'

    def has_add_permission(self, request, obj=None):
        return False
    
@admin.register(TenderUser)
class TenderUserAdmin(admin.ModelAdmin):
    """–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ç–µ–Ω–¥–µ—Ä—ñ–≤"""
    list_display = [
        'tender_number', 'company_name', 'email', 'status_colored', 
        'department_name', 'access_status', 'activation_link_display', 'password_change_link', 'created_at'
    ]
    list_filter = ['status', 'is_activated', 'department']
    search_fields = ['tender_number', 'company_name', 'email', 'edrpou']
    readonly_fields = ['tender_number', 'created_at', 'updated_at', 'activation_token', 'activation_link_field', 'permits_section']
    actions = ['approve_users', 'decline_users', 'regenerate_activation_tokens']
    
    # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–ª—è Django
    exclude = [
        'groups', 'user_permissions', 'is_staff', 'is_superuser',
        'last_login', 'date_joined', 'is_active',
        'first_name', 'last_name', 'username'
    ]

    class Media:
        css = {
            'all': ('admin/css/tabs.css',)
        }
        js = ('admin/js/tabs.js', 'admin/js/permits.js', 'admin/js/custom.js')

    # ‚≠ê –ö–õ–Æ–ß–û–í–Ü –ó–ú–Ü–ù–ò: –†—ñ–∑–Ω—ñ –ø—Ä–∞–≤–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    def get_inlines(self, request, obj):
        """–°—É–ø–µ—Ä–∞–¥–º—ñ–Ω –±–∞—á–∏—Ç—å –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ, –∞–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ - —Ç—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ"""
        if request.user.is_superuser:
            # –°—É–ø–µ—Ä–∞–¥–º—ñ–Ω –±–∞—á–∏—Ç—å –í–°–Ü –¥–µ—Ç–∞–ª—ñ
            return [
                UserSpecificationInline,
                UserEmployeeInline, 
                UserOrderInline,
                UserTechnicInline,
                UserInstrumentInline,
                UserPPEInline,
            ]
        else:
            # –ê–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –ù–ï –ë–ê–ß–ê–¢–¨ –¥–µ—Ç–∞–ª—ñ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
            return []
    
    def get_fieldsets(self, request, obj=None):
        """–†—ñ–∑–Ω—ñ fieldsets –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        if request.user.is_superuser:
            # –°—É–ø–µ—Ä–∞–¥–º—ñ–Ω –±–∞—á–∏—Ç—å –≤—Å—ñ –ø–æ–ª—è
            return (
                ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
                    'fields': ('tender_number', 'email', 'status', 'department')
                }),
                ('–î–∞–Ω—ñ –∫–æ–º–ø–∞–Ω—ñ—ó', {
                    'fields': ('company_name', 'edrpou', 'legal_address', 'actual_address', 
                              'director_name', 'contact_person', 'phone')
                }),
                ('–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—î—é', {
                    'fields': ('activation_link_field',),
                    'classes': ('wide',)
                }),
                ('–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
                    'fields': ('is_activated', 'activation_token', 'activation_expires', 'created_at', 'updated_at'),
                    'classes': ('collapse',)
                }),
                ('–ü–µ—Ä–µ–ø—É—Å—Ç–∫–∏', {  # ‚Üê –î–û–î–ê–ô–¢–ï –¶–ï
                    'fields': ('permits_section',),
                    'classes': ('wide',)
                }),
            )
        else:
            # –ê–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –±–∞—á–∞—Ç—å —Ç—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é + –ø–µ—Ä–µ–ø—É—Å—Ç–∫–∏
            return (
                ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
                    'fields': ('tender_number', 'company_name', 'email', 'status', 'department')
                }),
                ('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
                    'fields': ('director_name', 'contact_person', 'phone'),
                    'classes': ('collapse',)
                }),
                ('–ü–µ—Ä–µ–ø—É—Å—Ç–∫–∏', {
                    'fields': ('permits_section',),
                    'classes': ('wide',)
                }),
            )

    def get_readonly_fields(self, request, obj=None):
        """–ê–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –º–æ–∂—É—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç—É—Å"""
        base_readonly = ['tender_number', 'created_at', 'updated_at', 'activation_token', 'permits_section']
        
        if request.user.is_superuser:
            # –°—É–ø–µ—Ä–∞–¥–º—ñ–Ω –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤—Å–µ + –±–∞—á–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü—ñ—é
            return base_readonly + ['activation_link_field']
        else:
            # –ê–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ - —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏
            return base_readonly + [
                'company_name', 'email', 'edrpou', 'legal_address', 'actual_address', 
                'director_name', 'contact_person', 'phone', 'department'
            ]

    def get_actions(self, request):
        """–ê–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –º–∞—é—Ç—å –æ–±–º–µ–∂–µ–Ω—ñ –¥—ñ—ó"""
        actions = super().get_actions(request)
        
        if not request.user.is_superuser:
            # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
            allowed_actions = ['approve_users', 'decline_users']
            actions = {key: value for key, value in actions.items() if key in allowed_actions}
        
        return actions

    def permits_section(self, obj):
    # –°–µ–∫—Ü—ñ—è –ø–µ—Ä–µ–ø—É—Å—Ç–æ–∫ –∑ –ø–æ–≤–Ω–∏–º —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω–∞ —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
        if not obj or not obj.pk:
            return "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        request = getattr(self, '_current_request', None)
        permits_count = obj.permits.count() if hasattr(obj, 'permits') else 0
    
        if request and request.user.is_superuser:
            # –°–£–ü–ï–†–ê–î–ú–Ü–ù: –ø–æ–≤–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (–∫–æ–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–æ–π –∂–µ)
            if permits_count > 0:
                permits_list = []
                for permit in obj.permits.all():
                    if permit.employee:
                        subject_name = permit.employee.name
                    elif permit.technic:
                        subject_name = permit.technic.display_name
                    else:
                        subject_name = "–ù–µ–≤—ñ–¥–æ–º–æ"
                    permit_info = f"{permit.permit_number} - {subject_name}"
                    
                    if permit.pdf_file:
                        download_link = f'<a href="{permit.pdf_file.url}" target="_blank" style="color: #007cba; text-decoration: none;">üìÑ {permit_info}</a>'
                    else:
                        download_link = f'üìÑ {permit_info}'
                    
                    delete_button = f'<a href="/admin/users/tenderuser/{permit.user.id}/delete-permit/{permit.id}/" style="color: #ff4d4f; margin-left: 10px; text-decoration: none;">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</a>'
                    
                    permits_list.append(f'{download_link}{delete_button}')
                
                permits_html = '<br>'.join(permits_list)
                permits_html = mark_safe(permits_html)

                result = format_html(
                    '<div style="background: #f6ffed; padding: 15px; border-radius: 6px; border-left: 4px solid #52c41a;">'
                    '<strong style="color: #52c41a;">üìã {} –ø–µ—Ä–µ–ø—É—Å—Ç–æ–∫:</strong><br><br>{}<br><br>'
                    '<div style="border-top: 1px solid #d9d9d9; padding-top: 15px; margin-top: 15px;">'
                    '<strong>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:</strong><br><br>'
                    '<code style="background: #f5f5f5; padding: 8px; display: block; border-radius: 4px; font-family: monospace; margin-bottom: 8px;">'
                    'python manage.py generate_permits {} # –í–∏–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ñ —ñ —Å—Ç–≤–æ—Ä–∏—Ç—å –Ω–æ–≤—ñ'
                    '</code>'
                    '</div>'
                    '</div>',
                    permits_count, permits_html, obj.tender_number
                )
                return mark_safe(result)
            else:
                # –ö–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–æ–π –∂–µ...
                if obj.status == 'accepted':
                    result = format_html(
                    '<div style="background: #f0f8f0; padding: 15px; border-radius: 6px; border-left: 4px solid #52c41a;">'
                    '<strong style="color: #52c41a;">üìã –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–ø—É—Å—Ç–æ–∫</strong><br><br>'
                    '<p>–ü–µ—Ä–µ–ø—É—Å—Ç–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ —ó—Ö:</p>'
                    '<button type="button" onclick="generatePermits({})" id="generateBtn_{}" '
                    'style="background: #52c41a; color: white; border: none; padding: 10px 20px; '
                    'border-radius: 4px; cursor: pointer; font-weight: bold; margin: 10px 0;">'
                    '‚ö° –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–ø—É—Å—Ç–∫–∏'
                    '</button>'
                    '<div id="generateResult_{}" style="margin-top: 10px;"></div>'
                    '</div>',
                    obj.id, obj.id, obj.id
                )
                    return mark_safe(result)
                else:
                    result = format_html(
                        '<div style="background: #fff7e6; padding: 15px; border-radius: 6px; border-left: 4px solid #faad14;">'
                        '<strong style="color: #fa8c16;">üìã –ü–µ—Ä–µ–ø—É—Å—Ç–∫–∏</strong><br><br>'
                        '<span style="color: #999;">–°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–∞—î –±—É—Ç–∏ "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä–µ–ø—É—Å—Ç–æ–∫</span><br><br>'
                        '<small style="color: #666;">–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {}</small>'
                        '</div>',
                        obj.get_status_display()
                    )
                    return mark_safe(result)
        else:
            # –ê–î–ú–Ü–ù –ü–Ü–î–†–û–ó–î–Ü–õ–£: –ø–µ—Ä–µ–≥–ª—è–¥ + –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if permits_count > 0:
                permits_list = []
                for permit in obj.permits.all():
                    if permit.employee:
                        subject_name = permit.employee.name
                    elif permit.technic:
                        subject_name = permit.technic.display_name
                    else:
                        subject_name = "–ù–µ–≤—ñ–¥–æ–º–æ"
                    permit_info = f"{permit.permit_number} - {subject_name}"
                    if permit.pdf_file:
                        permits_list.append(
                            f'<a href="{permit.pdf_file.url}" target="_blank" style="color: #007cba; text-decoration: none;">üìÑ {permit_info}</a>'
                            f' <a href="{permit.pdf_file.url}" download style="color: #52c41a; margin-left: 8px; text-decoration: none;">‚¨áÔ∏è –°–∫–∞—á–∞—Ç–∏</a>'
                        )
                    else:
                        permits_list.append(f'üìÑ {permit_info} <span style="color: #ccc;">(—Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π)</span>')
                
                permits_html = '<br>'.join(permits_list)
                permits_html = mark_safe(permits_html)
                # –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç–∏ –≤—Å—ñ" –≤–Ω–∏–∑—É
                download_all_url = f"/admin/users/tenderuser/{obj.id}/download-all-permits/"
                
                result = format_html(
                    '<div style="background: #f6ffed; padding: 15px; border-radius: 6px; border-left: 4px solid #52c41a;">'
                    '<strong style="color: #52c41a;">üìã {} –ø–µ—Ä–µ–ø—É—Å—Ç–æ–∫:</strong><br><br>{}<br><br>'
                    '<div style="border-top: 1px solid #d9d9d9; padding-top: 15px; margin-top: 15px;">'
                    '<a href="{}" style="background: #52c41a; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; font-weight: bold;">'
                    'üì¶ –°–∫–∞—á–∞—Ç–∏ –≤—Å—ñ (ZIP)'
                    '</a>'
                    '</div>'
                    '</div>',
                    permits_count, permits_html, download_all_url
                )
            
                return mark_safe(result)
            else:
                result = format_html(
                    '<div style="background: #f5f5f5; padding: 15px; border-radius: 6px; border-left: 4px solid #d9d9d9;">'
                    '<strong style="color: #666;">üìã –ü–µ—Ä–µ–ø—É—Å—Ç–∫–∏</strong><br><br>'
                    '<span style="color: #999;">–ü–µ—Ä–µ–ø—É—Å—Ç–∫–∏ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ</span>'
                    '</div>'
                )
                return mark_safe(result)

    permits_section.short_description = '–ü–µ—Ä–µ–ø—É—Å—Ç–∫–∏'
    permits_section.allow_tags = True

    def delete_permit_view(self, request, user_id, permit_id):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–µ—Ä–µ–ø—É—Å—Ç–∫–∏"""
        from django.shortcuts import redirect
        from django.contrib import messages
        from django.http import JsonResponse
        
        if not request.user.is_superuser:
            if request.method == 'DELETE':
                return JsonResponse({'error': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'}, status=403)
            messages.error(request, '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ')
            return redirect(f'/admin/users/tenderuser/{user_id}/change/')
        
        try:
            permit = Permit.objects.get(id=permit_id, user_id=user_id)
            
            if permit.employee:
                subject_name = permit.employee.name
            elif permit.technic:
                subject_name = permit.technic.display_name
            else:
                subject_name = "–ù–µ–≤—ñ–¥–æ–º–æ"
                
            permit_info = f"{permit.permit_number} - {subject_name}"
            permit.delete()
            
            if request.method == 'DELETE':
                return JsonResponse({'success': True, 'message': f'–ü–µ—Ä–µ–ø—É—Å—Ç–∫—É "{permit_info}" –≤–∏–¥–∞–ª–µ–Ω–æ'})
            else:
                messages.success(request, f'–ü–µ—Ä–µ–ø—É—Å—Ç–∫—É "{permit_info}" –≤–∏–¥–∞–ª–µ–Ω–æ')
                
        except Permit.DoesNotExist:
            if request.method == 'DELETE':
                return JsonResponse({'error': '–ü–µ—Ä–µ–ø—É—Å—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}, status=404)
            messages.error(request, '–ü–µ—Ä–µ–ø—É—Å—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
        except Exception as e:
            if request.method == 'DELETE':
                return JsonResponse({'error': f'–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {str(e)}'}, status=500)
            messages.error(request, f'–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {str(e)}')
        
        if request.method == 'DELETE':
            return JsonResponse({'error': '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}, status=500)
        
        return redirect(f'/admin/users/tenderuser/{user_id}/change/')

    def generate_permits_ajax(self, request, object_id):
        """AJAX endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä–µ–ø—É—Å—Ç–æ–∫"""
        import json
        from django.http import JsonResponse
        from django.db import transaction
        from users.services.pdf_generator import PermitPDFGenerator
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
        if not request.user.is_superuser:
            return JsonResponse({'error': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'}, status=403)
        
        try:
            user = self.get_object(request, object_id)
            
            if user.status != 'accepted':
                return JsonResponse({
                    'error': f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Å—Ç–∞—Ç—É—Å "{user.get_status_display()}". –ü–æ—Ç—Ä—ñ–±–µ–Ω —Å—Ç–∞—Ç—É—Å "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π"'
                }, status=400)
            
            with transaction.atomic():
                # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –ø–µ—Ä–µ–ø—É—Å—Ç–∫–∏
                old_count = user.permits.count()
                user.permits.all().delete()
                
                generator = PermitPDFGenerator()
                created_permits = []
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–ª—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
                for employee in user.employees.all():
                    permit = Permit.objects.create(
                        user=user,
                        permit_number=Permit.generate_permit_number(user),
                        permit_type='employee',
                        employee=employee,
                        created_by=request.user
                    )
                    generator.generate_permit(permit)
                    permit.save()
                    created_permits.append({
                        'number': permit.permit_number,
                        'name': employee.name
                    })
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–ª—è —Ç–µ—Ö–Ω—ñ–∫–∏
                for technic in user.technics.all():
                    permit = Permit.objects.create(
                        user=user,
                        permit_number=Permit.generate_permit_number(user),
                        permit_type='technic',
                        technic=technic,
                        created_by=request.user
                    )
                    generator.generate_permit(permit)
                    permit.save()
                    created_permits.append({
                        'number': permit.permit_number,
                        'name': technic.display_name
                    })
                
                change_url = reverse('admin:users_tenderuser_change', args=[object_id])
                
                return JsonResponse({
                    'success': True,
                    'message': f'–£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(created_permits)} –ø–µ—Ä–µ–ø—É—Å—Ç–æ–∫',
                    'deleted': old_count,
                    'created': len(created_permits),
                    'permits': created_permits,
                    'redirect_url': change_url
                })
                
        except Exception as e:
            return JsonResponse({'error': f'–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {str(e)}'}, status=500)

    def download_all_permits_view(self, request, object_id):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–ø—É—Å—Ç–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ ZIP –∞—Ä—Ö—ñ–≤—ñ"""
        import zipfile
        import io
        from django.http import HttpResponse
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            user = self.get_object(request, object_id)
        except:
            from django.http import Http404
            raise Http404("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
        if not request.user.is_staff:
            from django.core.exceptions import PermissionDenied
            raise PermissionDenied("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        
        if not request.user.is_superuser:
            # –ê–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –º–æ–∂—É—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ —Å–≤–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
            if not hasattr(request.user, 'department') or user.department != request.user.department:
                from django.core.exceptions import PermissionDenied
                raise PermissionDenied("–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–ø—É—Å—Ç–∫–∏ —Å–≤–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É")
        
        permits = user.permits.all()
        
        if not permits.exists():
            from django.http import HttpResponseNotFound
            return HttpResponseNotFound("–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –ø–µ—Ä–µ–ø—É—Å—Ç–æ–∫")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ ZIP –∞—Ä—Ö—ñ–≤ –≤ –ø–∞–º'—è—Ç—ñ
        zip_buffer = io.BytesIO()
        
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            for permit in permits:
                if permit.pdf_file:
                    try:
                        file_content = permit.pdf_file.read()
                        
                        if permit.employee:
                            subject_name = permit.employee.name
                        elif permit.technic:
                            subject_name = permit.technic.display_name
                        else:
                            subject_name = "Unknown"
                        
                        file_extension = permit.pdf_file.name.split('.')[-1] if '.' in permit.pdf_file.name else 'pdf'
                        file_name = f"{permit.permit_number}_{subject_name.replace(' ', '_')}.{file_extension}"
                        zip_file.writestr(file_name, file_content)
                    except Exception as e:
                        error_info = f"–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É {permit.permit_number}: {str(e)}"
                        zip_file.writestr(f"{permit.permit_number}_ERROR.txt", error_info.encode('utf-8'))
        
        zip_buffer.seek(0)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ZIP —Ñ–∞–π–ª
        response = HttpResponse(
            zip_buffer.read(),
            content_type='application/zip'
        )
        response['Content-Disposition'] = f'attachment; filename="permits_{user.tender_number}_{user.company_name}.zip"'
        
        return response

    def get_urls(self):
        from django.urls import path
        urls = super().get_urls()
        custom_urls = [
            # –í–ê–ñ–õ–ò–í–û: —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ—à—ñ URL –º–∞—é—Ç—å –π—Ç–∏ –ü–ï–†–ï–î –∑–∞–≥–∞–ª—å–Ω–∏–º–∏
            path('<int:user_id>/delete-permit/<int:permit_id>/', 
                self.admin_site.admin_view(self.delete_permit_view), 
                name='users_tenderuser_delete_permit'),
            path('<int:object_id>/download-all-permits/', 
                self.admin_site.admin_view(self.download_all_permits_view), 
                name='users_tenderuser_download_all_permits'),
            path('<int:object_id>/generate-permits-ajax/', 
                self.admin_site.admin_view(self.generate_permits_ajax), 
                name='users_tenderuser_generate_permits_ajax'),
        ]
        # –í–ê–ñ–õ–ò–í–û: custom URLs –º–∞—é—Ç—å –π—Ç–∏ –ü–ï–†–ï–î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º–∏
        return custom_urls + urls

    def changeform_view(self, request, object_id=None, form_url='', extra_context=None):
        """–ó–±–µ—Ä—ñ–≥–∞—î–º–æ request –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ permits_section"""
        self._current_request = request
        return super().changeform_view(request, object_id, form_url, extra_context)
        
    def password_change_link(self, obj):
        if obj.pk:
            url = reverse('admin:users_tenderuser_change', args=[obj.pk])
            return format_html(
                '<a href="{}" style="color: #007cba; font-weight: bold;">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</a>',
                url
            )
        return "-"
    password_change_link.short_description = '–î—ñ—ó'

    def get_queryset(self, request):
        qs = super().get_queryset(request).filter(is_staff=False)  # –¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ —Ç–µ–Ω–¥–µ—Ä—ñ–≤
        
        if request.user.is_superuser:
            # –°—É–ø–µ—Ä–∞–¥–º—ñ–Ω –±–∞—á–∏—Ç—å –≤—Å—ñ—Ö
            return qs
        elif request.user.is_staff and hasattr(request.user, 'department') and request.user.department:
            # –ê–¥–º—ñ–Ω –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É –±–∞—á–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –∑—ñ —Å–≤–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
            return qs.filter(department=request.user.department)
        else:
            # –Ø–∫—â–æ —É –∞–¥–º—ñ–Ω–∞ –Ω–µ–º–∞—î –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É - –Ω–µ –±–∞—á–∏—Ç—å –Ω—ñ–∫–æ–≥–æ
            return qs.none()
    
    def get_list_filter(self, request):
        """–ê–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –Ω–µ –±–∞—á–∞—Ç—å —Ñ—ñ–ª—å—Ç—Ä –ø–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∞—Ö"""
        filters = list(self.list_filter)
        if not request.user.is_superuser:
            # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤
            filters = [f for f in filters if f != 'department']
        return filters
    
    def has_add_permission(self, request):
        """–¢—ñ–ª—å–∫–∏ —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ç–µ–Ω–¥–µ—Ä—ñ–≤"""
        return request.user.is_superuser
    
    def has_delete_permission(self, request, obj=None):
        """–¢—ñ–ª—å–∫–∏ —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏"""
        return request.user.is_superuser
    
    def has_change_permission(self, request, obj=None):
        """–ê–¥–º—ñ–Ω –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑—ñ —Å–≤–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É"""
        if request.user.is_superuser:
            return True
        if obj and hasattr(request.user, 'department'):
            return obj.department == request.user.department
        return False
    
    def department_name(self, obj):
        return obj.department.name if obj.department else '-'
    department_name.short_description = '–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª'
    
    def status_colored(self, obj):
        """–ö–æ–ª—å–æ—Ä–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å"""
        colors = {
            'new': '#fa8c16',          # –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
            'in_progress': '#1890ff',   # —Å–∏–Ω—ñ–π  
            'pending': '#faad14',       # –∂–æ–≤—Ç–∏–π
            'accepted': '#52c41a',      # –∑–µ–ª–µ–Ω–∏–π
            'declined': '#ff4d4f',      # —á–µ—Ä–≤–æ–Ω–∏–π
            'blocked': '#8c8c8c',       # —Å—ñ—Ä–∏–π
        }
        color = colors.get(obj.status, '#000')
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color, obj.get_status_display()
        )
    status_colored.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def access_status(self, obj):
        """–î–æ—Å—Ç—É–ø –¥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É"""
        if obj.is_activated and obj.status in ['in_progress', 'pending', 'accepted']:
            return format_html('<span style="color: #52c41a;">‚úÖ –ú–∞—î –¥–æ—Å—Ç—É–ø</span>')
        else:
            return format_html('<span style="color: #ff4d4f;">‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É</span>')
    access_status.short_description = '–î–æ—Å—Ç—É–ø –¥–æ –∫–∞–±—ñ–Ω–µ—Ç—É'
    
    def activation_link_display(self, obj):
        """–°–ø—Ä–æ—â–µ–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª—ñ–Ω–∫—É –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó"""
        if obj.status == 'in_progress' and obj.activation_token and not obj.is_activated:
            return format_html('<span style="color: #1890ff;">üîó –Ñ –ª—ñ–Ω–∫</span>')
        elif obj.is_activated:
            return format_html('<span style="color: #52c41a;">‚úÖ –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π</span>')
        elif obj.status == 'new':
            return format_html('<span style="color: #fa8c16;">‚è≥ –ß–µ–∫–∞—î —Å—Ö–≤–∞–ª–µ–Ω–Ω—è</span>')
        else:
            return format_html('<span style="color: #8c8c8c;">‚Äî</span>')
    activation_link_display.short_description = '–ê–∫—Ç–∏–≤–∞—Ü—ñ—è'
    
    def activation_link_field(self, obj):
        """–õ—ñ–Ω–∫ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if obj.activation_token:
            frontend_url = getattr(settings, 'FRONTEND_URL', 'http://localhost:3000')
            activation_url = f"{frontend_url}/activate/{obj.activation_token}"
            
            if obj.status == 'in_progress' and not obj.is_activated:
                return format_html(
                    '<div style="background: #f0f8f0; padding: 15px; border: 1px solid #52c41a; border-radius: 5px;">'
                    '<h4 style="color: #52c41a; margin-top: 0;">üîó –õ—ñ–Ω–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó</h4>'
                    '<p><strong>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ü–µ–π –ª—ñ–Ω–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–∫–∞—É–Ω—Ç—É:</strong></p>'
                    '<textarea readonly style="width: 95%; height: 60px; font-family: monospace; font-size: 12px; background: white; border: 1px solid #ddd; padding: 8px;">{}</textarea>'
                    '<br><br>'
                    '<button type="button" onclick="copyActivationLink(\'{}\'); return false;" '
                    'style="background: #52c41a; color: white; border: none; padding: 8px 16px; cursor: pointer; border-radius: 4px;">'
                    'üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –ª—ñ–Ω–∫</button>'
                    '</div>',
                    activation_url, activation_url
                )
            elif obj.status == 'new':
                return format_html(
                    '<div style="background: #fff7e6; padding: 15px; border: 1px solid #faad14; border-radius: 5px;">'
                    '<h4 style="color: #fa8c16; margin-top: 0;">‚è≥ –û—á—ñ–∫—É—î —Å—Ö–≤–∞–ª–µ–Ω–Ω—è</h4>'
                    '<p>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ —Å—Ö–≤–∞–ª–µ–Ω–∏–π. –ó–º—ñ–Ω—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "–î–æ–ø—É—â–µ–Ω–∏–π" –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó.</p>'
                    '</div>'
                )
            elif obj.is_activated:
                return format_html(
                    '<div style="background: #f6ffed; padding: 15px; border: 1px solid #52c41a; border-radius: 5px;">'
                    '<h4 style="color: #52c41a; margin-top: 0;">‚úÖ –ê–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π</h4>'
                    '<p>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞–≤ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç —ñ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—ñ.</p>'
                    '</div>'
                )
            elif obj.status == 'declined':
                return format_html(
                    '<div style="background: #fff2f0; padding: 15px; border: 1px solid #ff4d4f; border-radius: 5px;">'
                    '<h4 style="color: #ff4d4f; margin-top: 0;">‚ùå –ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞</h4>'
                    '<p>–ó–∞—è–≤–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</p>'
                    '</div>'
                )
        return "–¢–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    
    activation_link_field.short_description = '–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—î—é'


# –î–æ–≤—ñ–¥–Ω–∏–∫–∏

class SubtypeSelect2Widget(ModelSelect2Widget):
    model = WorkSubType
    search_fields = ['name__icontains', 'work_type__name__icontains']
    
    def label_from_instance(self, obj):
        return f"{obj.name} ({obj.work_type.name})"
    
    def build_attrs(self, base_attrs, extra_attrs=None):
        attrs = super().build_attrs(base_attrs, extra_attrs)
        attrs.update({
            'data-minimum-input-length': '0',  # –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –æ–¥—Ä–∞–∑—É
            'data-placeholder': '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–∏–ø —Ä–æ–±—ñ—Ç...',
            'data-allow-clear': 'true',
            'data-language': 'uk',
        })
        return attrs

class EquipmentForm(forms.ModelForm):
    class Meta:
        model = Equipment
        fields = '__all__'
        widgets = {
            'subtype': SubtypeSelect2Widget(attrs={
                'style': 'width: 100%;',
            })
        }
# –§–æ—Ä–º–∞ –¥–ª—è inline
class EquipmentInlineForm(forms.ModelForm):
    class Meta:
        model = Equipment
        fields = '__all__'
        widgets = {
            'name': forms.Textarea(attrs={'rows': 2, 'cols': 60}),
        }

class EquipmentInline(admin.TabularInline):
    model = Equipment
    form = EquipmentInlineForm
    extra = 1

class WorkSubTypeInline(admin.TabularInline):
    model = WorkSubType
    extra = 1


class WorkTypeSelect2Widget(ModelSelect2Widget):
    model = WorkType
    search_fields = ['name__icontains']
    
    def build_attrs(self, base_attrs, extra_attrs=None):
        attrs = super().build_attrs(base_attrs, extra_attrs)
        attrs.update({
            'data-minimum-input-length': '0',
            'data-placeholder': '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–±—ñ—Ç...',
            'data-allow-clear': 'true',
            'data-language': 'uk',
        })
        return attrs

# –§–æ—Ä–º–∞ –¥–ª—è WorkSubType
class WorkSubTypeForm(forms.ModelForm):
    class Meta:
        model = WorkSubType
        fields = '__all__'
        widgets = {
            'work_type': WorkTypeSelect2Widget(attrs={
                'style': 'width: 100%;',
            })
        }
        
@admin.register(WorkType)
class WorkTypeAdmin(admin.ModelAdmin):
    list_display = ('name',)
    inlines = [WorkSubTypeInline]

@admin.register(WorkSubType)
class WorkSubTypeAdmin(admin.ModelAdmin):
    form = WorkSubTypeForm
    list_display = ('name', 'work_type', 'has_equipment')
    list_filter = ('work_type', 'has_equipment')
    inlines = [EquipmentInline]

@admin.register(Equipment)
class EquipmentAdmin(admin.ModelAdmin):
    form = EquipmentForm  # –î–æ–¥–∞–Ω–æ —Ñ–æ—Ä–º—É –∑ Select2
    list_display = ['id', 'name', 'subtype']
    list_filter = ['subtype__work_type', 'subtype']
    search_fields = ['name', 'subtype__name']
    
    class Media:
        css = {
            'all': (
                'admin/css/custom.css',
                'admin/css/select2-custom.css',
            )
        }

@admin.register(UserWork)
class UserWorkAdmin(admin.ModelAdmin):
    list_display = ['user', 'work_type', 'work_sub_type', 'expiry_date', 'is_expired_display', 'created_at']
    list_filter = ['work_type', 'work_sub_type', 'expiry_date', 'created_at']
    search_fields = ['user__company_name', 'user__email', 'work_type__name', 'work_sub_type__name']
    list_select_related = ['user', 'work_type', 'work_sub_type']
    raw_id_fields = ['user']
    readonly_fields = ['is_expired_display']
    
    def is_expired_display(self, obj):
        if obj.is_expired:
            return "‚ùå –ó–∞–∫—ñ–Ω—á–∏–≤—Å—è"
        else:
            return "‚úÖ –î—ñ—î"
    is_expired_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if not request.user.is_superuser and hasattr(request.user, 'department') and request.user.department:
            # –ê–¥–º—ñ–Ω–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –±–∞—á–∞—Ç—å —Ç—ñ–ª—å–∫–∏ —Ä–æ–±–æ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑—ñ —Å–≤–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
            qs = qs.filter(user__department=request.user.department)
        return qs
    

@admin.register(TechnicType)
class TechnicTypeAdmin(admin.ModelAdmin):
    list_display = ['name', 'is_active', 'documents_count', 'created_at']
    list_filter = ['is_active', 'created_at']
    search_fields = ['name']
    readonly_fields = ['created_at']
    
    def documents_count(self, obj):
        return len(obj.required_documents)
    documents_count.short_description = '–ö-—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤'


@admin.register(InstrumentType)
class InstrumentTypeAdmin(admin.ModelAdmin):
    list_display = ['name', 'is_active', 'documents_count', 'created_at']
    list_filter = ['is_active', 'created_at']
    search_fields = ['name']
    readonly_fields = ['created_at']
    
    def documents_count(self, obj):
        return len(obj.required_documents)
    documents_count.short_description = '–ö-—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤'

# –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ - –¥–æ–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–ø—É—Å—Ç–æ–∫ –≤ –∞–¥–º—ñ–Ω–∫—É
# @admin.register(Permit)
# class PermitAdmin(admin.ModelAdmin):
#     list_display = ['permit_number', 'user_tender', 'permit_type', 'subject_name', 'created_at']
#     list_filter = ['permit_type', 'created_at', 'user__department']
#     readonly_fields = ['permit_number', 'created_at']
    
#     def user_tender(self, obj):
#         return f"{obj.user.tender_number} - {obj.user.company_name}"
#     user_tender.short_description = '–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ç–µ–Ω–¥–µ—Ä—É'
    
#     def subject_name(self, obj):
#         if obj.employee:
#             return obj.employee.name
#         elif obj.technic:
#             return obj.technic.display_name
#         return "–ù–µ–≤—ñ–¥–æ–º–æ"
#     subject_name.short_description = '–ù–∞ –∫–æ–≥–æ/—â–æ –≤–∏–¥–∞–Ω–æ'
    
#     def has_add_permission(self, request):
#         return False  # –ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ admin
    
#     def get_queryset(self, request):
#         qs = super().get_queryset(request)
#         if request.user.is_superuser:
#             return qs
#         elif request.user.is_staff and hasattr(request.user, 'department'):
#             return qs.filter(user__department=request.user.department)
#         return qs.none()